# -*- coding: utf-8 -*-
"""GANs_for_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uzJlAooTUuLjKS9ZK_HtygmjC2J4fsK6
"""

# install some packages
# only run once
!pip install torchvision tensorboardx jupyter matplotlib numpy

# mount drive
from google.colab import drive
drive.mount('/content/drive', force_remount = True)

# import packages
import torch
from torch import nn, optim
from torch.autograd.variable import Variable
from torchvision import transforms, datasets

# need to import a module from GANs
!cp "drive/My Drive/GANs/utils.py" . 
from utils import Logger

# dataset
def mnist_data():
  # convert to tensor and normalize to -1 to 1
  compose = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5,), (0.5,))
        ])
  out_dir = './dataset'
  return datasets.MNIST(root=out_dir, train=True, transform=compose, download=True)


# Load data
data = mnist_data()

# create an iterable dataset
data_loader = torch.utils.data.DataLoader(data, batch_size=100, shuffle=True)
# Num batches
num_batches = len(data_loader)

# to verify data_loader created, print num_batches
print("Num batches: " + str(num_batches))

# Create neural network for discrimnator 
# net architecture:
# input size = 28*28 = 784
# Layer 0: 784 --> 1024 --> Leaky RELU --> Dropout
# Layer 1: 1024 --> 512 --> Leaky RELU --> Dropout 
# Layer 2: 512 --> 256 --> Leaky RELU --> Dropout
# FC: 256 --> 1 --> Sigmoid

class DiscriminatorNetwork(torch.nn.Module):
    """
    A three layer neural network architecture to model
    the discriminator
    """
    def __init__(self):
        super(DiscriminatorNetwork, self).__init__()
        in_features = 784
        out_features = 1
        
        self.hidden0 = nn.Sequential( 
            nn.Linear(in_features, 1024),
            nn.LeakyReLU(0.2),
            nn.Dropout(0.3)
        )
        self.hidden1 = nn.Sequential(
            nn.Linear(1024, 512),
            nn.LeakyReLU(0.2),
            nn.Dropout(0.3)
        )
        self.hidden2 = nn.Sequential(
            nn.Linear(512, 256),
            nn.LeakyReLU(0.2),
            nn.Dropout(0.3)
        )
        self.out = nn.Sequential(
            torch.nn.Linear(256, out_features),
            torch.nn.Sigmoid()
        )

    def forward(self, x):
        x = self.hidden0(x)
        x = self.hidden1(x)
        x = self.hidden2(x)
        x = self.out(x)
        return x

# initialize the network
discriminator = DiscriminatorNetwork()
print("Initialized the discrimnator network")

# the Discriminator network needs a flattened image
# but we want the output to be a 2D image 

# convert 1D to 2D 
def images_to_vectors(images):
    return images.view(images.size(0), 784)

def vectors_to_images(vectors):
    return vectors.view(vectors.size(0), 1, 28, 28)

# Define the generative network
# Goal of this network is to create an image that is not separate from actual
# number images
# since we want this output image to compare with real images, output to 784
# and then convert to 28*28

# net architecture:
# input size = 100 (from a prior distribution)
# no dropouts since we don't want to lose information
# Layer 0: 100 --> 256 --> Leaky RELU 
# Layer 1: 256 --> 512 --> Leaky RELU 
# Layer 2: 512 --> 1024 --> Leaky RELU 
# FC: 1024 --> 784 --> TanH

# use TanH because want to normalize the values to -1 to 1 (same as how we have
# normalized MNIST images)
class GeneratorNetwork(torch.nn.Module):
    """
    A three hidden-layer generative neural network
    """
    def __init__(self):
        super(GeneratorNetwork, self).__init__()
        in_features = 100
        out_features = 784
        
        self.hidden0 = nn.Sequential(
            nn.Linear(in_features, 256),
            nn.LeakyReLU(0.2)
        )
        self.hidden1 = nn.Sequential(            
            nn.Linear(256, 512),
            nn.LeakyReLU(0.2)
        )
        self.hidden2 = nn.Sequential(
            nn.Linear(512, 1024),
            nn.LeakyReLU(0.2)
        )
        
        self.out = nn.Sequential(
            nn.Linear(1024, out_features),
            nn.Tanh()
        )

    def forward(self, x):
        x = self.hidden0(x)
        x = self.hidden1(x)
        x = self.hidden2(x)
        x = self.out(x)
        return x

generator = GeneratorNetwork()
print("Generator network created")

# noise following a normal prior will be out input to the generator
def noise(size):
    '''
    Generates a 1-d vector of gaussian sampled random values
    '''
    n = Variable(torch.randn(size, 100))
    return n

# define Adam optimizers for generative and discrimnator networks
dis_optimizer = optim.Adam(discriminator.parameters(), lr=0.0002)
gen_optimizer = optim.Adam(generator.parameters(), lr=0.0002)

# log loss penalizes the networks heavily for falsely classifying 
# fake images as real, so use a Binary Cross Entropy loss
# total loss will be the sum of gen and dis losses
loss = nn.BCELoss()

# accessory functions to create 1s-tensor and 0s-tensors
def ones_target(size):
    '''
    Tensor containing ones, with shape = size
    '''
    data = Variable(torch.ones(size, 1))
    return data

def zeros_target(size):
    '''
    Tensor containing zeros, with shape = size
    '''
    data = Variable(torch.zeros(size, 1))
    return data

# Define training protocol 
# train on real data (1's) and fake data (0's)
def train_discriminator(optimizer, real_data, fake_data):
    N = real_data.size(0)
    # Reset gradients
    optimizer.zero_grad()
    
    # 1.1 Train on Real Data
    prediction_real = discriminator(real_data)
    # Calculate error and backpropagate
    error_real = loss(prediction_real, ones_target(N) )
    error_real.backward()

    # 1.2 Train on Fake Data
    prediction_fake = discriminator(fake_data)
    # Calculate error and backpropagate
    error_fake = loss(prediction_fake, zeros_target(N))
    error_fake.backward()
    
    # 1.3 Update weights with gradients
    optimizer.step()
    
    # Return error and predictions for real and fake inputs
    return error_real + error_fake, prediction_real, prediction_fake

# Define testing protocol
def train_generator(optimizer, fake_data):
    N = fake_data.size(0)
    # Reset gradients
    optimizer.zero_grad()
    # Sample noise and generate fake data
    prediction = discriminator(fake_data)
    # Calculate error and backpropagate
    error = loss(prediction, ones_target(N))
    error.backward()
    # Update weights with gradients
    optimizer.step()
    # Return error
    return error

num_test_samples = 16
test_noise = noise(num_test_samples)

# Create logger instance
logger = Logger(model_name='VGAN', data_name='MNIST')
# Total number of epochs to train
num_epochs = 200
for epoch in range(num_epochs):
    for n_batch, (real_batch,_) in enumerate(data_loader):
        N = real_batch.size(0)
        # 1. Train Discriminator
        real_data = Variable(images_to_vectors(real_batch))
        # Generate fake data and detach 
        # (so gradients are not calculated for generator)
        fake_data = generator(noise(N)).detach()
        # Train D
        d_error, d_pred_real, d_pred_fake = \
              train_discriminator(dis_optimizer, real_data, fake_data)

        # 2. Train Generator
        # Generate fake data
        fake_data = generator(noise(N))
        # Train G
        g_error = train_generator(gen_optimizer, fake_data)
        # Log batch error
        logger.log(d_error, g_error, epoch, n_batch, num_batches)
        # Display Progress every few batches
        if (n_batch) % 100 == 0: 
            test_images = vectors_to_images(generator(test_noise))
            test_images = test_images.data
            logger.log_images(
                test_images, num_test_samples, 
                epoch, n_batch, num_batches
            );
            # Display status Logs
            logger.display_status(
                epoch, num_epochs, n_batch, num_batches,
                d_error, g_error, d_pred_real, d_pred_fake
            )